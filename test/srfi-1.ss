(import (scheme base)
        (scheme cxr)
        (scheme process-context)
        (scheme write)
        (srfi 1)
        (srfi 78))

(check (cons 'a 'b) => '(a . b))

(check (list 'a 'b 'c) => '(a b c))

(check (xcons 'a 'b) => '(b . a))

(check (cons* 'a) => 'a)
(check (cons* 'a 'b) => '(a . b))
(check (cons* 'a 'b 'c) => '(a b . c))

(check (make-list 2 'a) => '(a a))

(check (list-tabulate 4 (lambda (x) x)) => '(0 1 2 3))
(check (list-tabulate 4 number->string) => '("0" "1" "2" "3"))

(check (list-copy '(a b c)) => '(a b c))

(check (circular-list 'a) => '#1=(a . #1#))
(check (circular-list 'a 'b) => '#1=(a b . #1#))
(check (circular-list 'a 'b 'c) => '#1=(a b c . #1#))

(check (iota 5) => '(0 1 2 3 4))
(check (iota 5 0 -0.1) (=> (lambda (x y) (list= = x y))) '(0 -0.1 -0.2 -0.3 -0.4))

(check (pair? 'a) => #f)
(check (pair? '(a . b)) => #t)
(check (pair? '(a b . c)) => #t)
(check (pair? '(a b c)) => #t)

(check (null? '()) => #t)
(check (null? '(a)) => #f)
(check (null? '(a . b)) => #f)
(check (null? '(a b . c)) => #f)
(check (null? 'a) => #f)
(check (null? 1) => #f)

(check (proper-list? '()) => #t)
(check (proper-list? '(a . b)) => #f)
(check (proper-list? '(a b . c)) => #f)
(check (proper-list? '(a b c)) => #t)
(check (proper-list? 'a) => #f)
(check (proper-list? 1) => #f)

(check (circular-list? '(a b c)) => #f)
(check (circular-list? '#1=(a b c . #1#)) => #t)

(check (dotted-list? '(a . b)) => #t)
(check (dotted-list? '(a b . c)) => #t)
(check (dotted-list? '(a b c)) => #f)

(check (not-pair? 'a) => #t)
(check (not-pair? '(a . b)) => #f)
(check (not-pair? '(a b . c)) => #f)
(check (not-pair? '(a b c)) => #f)

(check (null-list? '()) => #t)
(check (null-list? '(a b c)) => #f)
(check (null-list? '#1=(a b c . #1#)) => #f)

(check (list= eq? '(a b c) '(a b c)) => #t)
(check (list= eq? '(a b c) '(a B c)) => #f)
(check (list= eqv? '(1 2 3) '(1.0 2.0 3.0)) => #f)
(check (list= =    '(1 2 3) '(1.0 2.0 3.0)) => #t)
(check (list= eqv?   '((a b) (c d) (e f)) '((a b) (c d) (e f))) => #f)
(check (list= equal? '((a b) (c d) (e f)) '((a b) (c d) (e f))) => #t)

(check (car    '((((aaaa . daaa) adaa . ddaa) (aada . dada) adda . ddda) ((aaad . daad) adad . ddad) (aadd . dadd) addd . dddd)) => '(((aaaa . daaa) adaa . ddaa) (aada . dada) adda . ddda))
(check (cdr    '((((aaaa . daaa) adaa . ddaa) (aada . dada) adda . ddda) ((aaad . daad) adad . ddad) (aadd . dadd) addd . dddd)) => '(((aaad . daad) adad . ddad) (aadd . dadd) addd . dddd))
(check (caar   '((((aaaa . daaa) adaa . ddaa) (aada . dada) adda . ddda) ((aaad . daad) adad . ddad) (aadd . dadd) addd . dddd)) => '((aaaa . daaa) adaa . ddaa))
(check (cadr   '((((aaaa . daaa) adaa . ddaa) (aada . dada) adda . ddda) ((aaad . daad) adad . ddad) (aadd . dadd) addd . dddd)) => '((aaad . daad) adad . ddad))
(check (cdar   '((((aaaa . daaa) adaa . ddaa) (aada . dada) adda . ddda) ((aaad . daad) adad . ddad) (aadd . dadd) addd . dddd)) => '((aada . dada) adda . ddda))
(check (cddr   '((((aaaa . daaa) adaa . ddaa) (aada . dada) adda . ddda) ((aaad . daad) adad . ddad) (aadd . dadd) addd . dddd)) => '((aadd . dadd) addd . dddd))
(check (caaar  '((((aaaa . daaa) adaa . ddaa) (aada . dada) adda . ddda) ((aaad . daad) adad . ddad) (aadd . dadd) addd . dddd)) => '(aaaa . daaa))
(check (caadr  '((((aaaa . daaa) adaa . ddaa) (aada . dada) adda . ddda) ((aaad . daad) adad . ddad) (aadd . dadd) addd . dddd)) => '(aaad . daad))
(check (cadar  '((((aaaa . daaa) adaa . ddaa) (aada . dada) adda . ddda) ((aaad . daad) adad . ddad) (aadd . dadd) addd . dddd)) => '(aada . dada))
(check (caddr  '((((aaaa . daaa) adaa . ddaa) (aada . dada) adda . ddda) ((aaad . daad) adad . ddad) (aadd . dadd) addd . dddd)) => '(aadd . dadd))
(check (cdaar  '((((aaaa . daaa) adaa . ddaa) (aada . dada) adda . ddda) ((aaad . daad) adad . ddad) (aadd . dadd) addd . dddd)) => '(adaa . ddaa))
(check (cdadr  '((((aaaa . daaa) adaa . ddaa) (aada . dada) adda . ddda) ((aaad . daad) adad . ddad) (aadd . dadd) addd . dddd)) => '(adad . ddad))
(check (cddar  '((((aaaa . daaa) adaa . ddaa) (aada . dada) adda . ddda) ((aaad . daad) adad . ddad) (aadd . dadd) addd . dddd)) => '(adda . ddda))
(check (cdddr  '((((aaaa . daaa) adaa . ddaa) (aada . dada) adda . ddda) ((aaad . daad) adad . ddad) (aadd . dadd) addd . dddd)) => '(addd . dddd))
(check (caaaar '((((aaaa . daaa) adaa . ddaa) (aada . dada) adda . ddda) ((aaad . daad) adad . ddad) (aadd . dadd) addd . dddd)) => 'aaaa)
(check (caaadr '((((aaaa . daaa) adaa . ddaa) (aada . dada) adda . ddda) ((aaad . daad) adad . ddad) (aadd . dadd) addd . dddd)) => 'aaad)
(check (caadar '((((aaaa . daaa) adaa . ddaa) (aada . dada) adda . ddda) ((aaad . daad) adad . ddad) (aadd . dadd) addd . dddd)) => 'aada)
(check (caaddr '((((aaaa . daaa) adaa . ddaa) (aada . dada) adda . ddda) ((aaad . daad) adad . ddad) (aadd . dadd) addd . dddd)) => 'aadd)
(check (cadaar '((((aaaa . daaa) adaa . ddaa) (aada . dada) adda . ddda) ((aaad . daad) adad . ddad) (aadd . dadd) addd . dddd)) => 'adaa)
(check (cadadr '((((aaaa . daaa) adaa . ddaa) (aada . dada) adda . ddda) ((aaad . daad) adad . ddad) (aadd . dadd) addd . dddd)) => 'adad)
(check (caddar '((((aaaa . daaa) adaa . ddaa) (aada . dada) adda . ddda) ((aaad . daad) adad . ddad) (aadd . dadd) addd . dddd)) => 'adda)
(check (cadddr '((((aaaa . daaa) adaa . ddaa) (aada . dada) adda . ddda) ((aaad . daad) adad . ddad) (aadd . dadd) addd . dddd)) => 'addd)
(check (cdaaar '((((aaaa . daaa) adaa . ddaa) (aada . dada) adda . ddda) ((aaad . daad) adad . ddad) (aadd . dadd) addd . dddd)) => 'daaa)
(check (cdaadr '((((aaaa . daaa) adaa . ddaa) (aada . dada) adda . ddda) ((aaad . daad) adad . ddad) (aadd . dadd) addd . dddd)) => 'daad)
(check (cdadar '((((aaaa . daaa) adaa . ddaa) (aada . dada) adda . ddda) ((aaad . daad) adad . ddad) (aadd . dadd) addd . dddd)) => 'dada)
(check (cdaddr '((((aaaa . daaa) adaa . ddaa) (aada . dada) adda . ddda) ((aaad . daad) adad . ddad) (aadd . dadd) addd . dddd)) => 'dadd)
(check (cddaar '((((aaaa . daaa) adaa . ddaa) (aada . dada) adda . ddda) ((aaad . daad) adad . ddad) (aadd . dadd) addd . dddd)) => 'ddaa)
(check (cddadr '((((aaaa . daaa) adaa . ddaa) (aada . dada) adda . ddda) ((aaad . daad) adad . ddad) (aadd . dadd) addd . dddd)) => 'ddad)
(check (cdddar '((((aaaa . daaa) adaa . ddaa) (aada . dada) adda . ddda) ((aaad . daad) adad . ddad) (aadd . dadd) addd . dddd)) => 'ddda)
(check (cddddr '((((aaaa . daaa) adaa . ddaa) (aada . dada) adda . ddda) ((aaad . daad) adad . ddad) (aadd . dadd) addd . dddd)) => 'dddd)

(let ((x '(1 2 3 4 5 6 7 8 9 10)))
  (let recurse ((i 0))
    (if (< i (length x))
        (begin (check (list-ref x i) => (+ i 1))
               (recurse (+ i 1))))))

(check (first   '(a b c d e f g h i j)) => 'a)
(check (second  '(a b c d e f g h i j)) => 'b)
(check (third   '(a b c d e f g h i j)) => 'c)
(check (fourth  '(a b c d e f g h i j)) => 'd)
(check (fifth   '(a b c d e f g h i j)) => 'e)
(check (sixth   '(a b c d e f g h i j)) => 'f)
(check (seventh '(a b c d e f g h i j)) => 'g)
(check (eighth  '(a b c d e f g h i j)) => 'h)
(check (ninth   '(a b c d e f g h i j)) => 'i)
(check (tenth   '(a b c d e f g h i j)) => 'j)

(call-with-values (lambda ()
                    (car+cdr '(a . b)))
                  (lambda (x y)
                    (check x => 'a)
                    (check y => 'b)))

(let ((x '(a b c d e))) (check (take  x 0) => '())          (check x => '(a b c d e)))
(let ((x '(a b c d e))) (check (take! x 0) => '())          (check x => '(a b c d e)))
(let ((x '(a b c d e))) (check (take  x 1) => '(a))         (check x => '(a b c d e)))
(let ((x '(a b c d e))) (check (take! x 1) => '(a))         (check x => '(a)))
(let ((x '(a b c d e))) (check (take  x 2) => '(a b))       (check x => '(a b c d e)))
(let ((x '(a b c d e))) (check (take! x 2) => '(a b))       (check x => '(a b)))
(let ((x '(a b c d e))) (check (take  x 3) => '(a b c))     (check x => '(a b c d e)))
(let ((x '(a b c d e))) (check (take! x 3) => '(a b c))     (check x => '(a b c)))
(let ((x '(a b c d e))) (check (take  x 4) => '(a b c d))   (check x => '(a b c d e)))
(let ((x '(a b c d e))) (check (take! x 4) => '(a b c d))   (check x => '(a b c d)))
(let ((x '(a b c d e))) (check (take  x 5) => '(a b c d e)) (check x => '(a b c d e)))
(let ((x '(a b c d e))) (check (take! x 5) => '(a b c d e)) (check x => '(a b c d e)))

(check (drop '(a b c d e) 0) => '(a b c d e))
(check (drop '(a b c d e) 1) => '(b c d e))
(check (drop '(a b c d e) 2) => '(c d e))
(check (drop '(a b c d e) 3) => '(d e))
(check (drop '(a b c d e) 4) => '(e))
(check (drop '(a b c d e) 5) => '())

(check (take-right '(a b c d e) 0) => '())
(check (take-right '(a b c d e) 1) => '(e))
(check (take-right '(a b c d e) 2) => '(d e))
(check (take-right '(a b c d e) 3) => '(c d e))
(check (take-right '(a b c d e) 4) => '(b c d e))
(check (take-right '(a b c d e) 5) => '(a b c d e))
(check (take-right '(a b c . x) 0) => 'x)
(check (take-right '(a b c . x) 1) => '(c . x))
(check (take-right '(a b c . x) 2) => '(b c . x))
(check (take-right '(a b c . x) 3) => '(a b c . x))

(let ((x '(a b c d e))) (check (drop-right  x 0) => '(a b c d e)) (check x => '(a b c d e)))
(let ((x '(a b c d e))) (check (drop-right! x 0) => '(a b c d e)) (check x => '(a b c d e)))
(let ((x '(a b c d e))) (check (drop-right  x 1) => '(a b c d))   (check x => '(a b c d e)))
(let ((x '(a b c d e))) (check (drop-right! x 1) => '(a b c d))   (check x => '(a b c d)))
(let ((x '(a b c d e))) (check (drop-right  x 2) => '(a b c))     (check x => '(a b c d e)))
(let ((x '(a b c d e))) (check (drop-right! x 2) => '(a b c))     (check x => '(a b c)))
(let ((x '(a b c d e))) (check (drop-right  x 3) => '(a b))       (check x => '(a b c d e)))
(let ((x '(a b c d e))) (check (drop-right! x 3) => '(a b))       (check x => '(a b)))
(let ((x '(a b c d e))) (check (drop-right  x 4) => '(a))         (check x => '(a b c d e)))
(let ((x '(a b c d e))) (check (drop-right! x 4) => '(a))         (check x => '(a)))
(let ((x '(a b c d e))) (check (drop-right  x 5) => '())          (check x => '(a b c d e)))
(let ((x '(a b c d e))) (check (drop-right! x 5) => '())          (check x => '(a b c d e)))
(let ((x '(a b c . z))) (check (drop-right  x 0) => '(a b c))     (check x => '(a b c . z)))
(let ((x '(a b c . z))) (check (drop-right! x 0) => '(a b c))     (check x => '(a b c)))
(let ((x '(a b c . z))) (check (drop-right  x 1) => '(a b))       (check x => '(a b c . z)))
(let ((x '(a b c . z))) (check (drop-right! x 1) => '(a b))       (check x => '(a b)))
(let ((x '(a b c . z))) (check (drop-right  x 2) => '(a))         (check x => '(a b c . z)))
(let ((x '(a b c . z))) (check (drop-right! x 2) => '(a))         (check x => '(a)))
(let ((x '(a b c . z))) (check (drop-right  x 3) => '())          (check x => '(a b c . z)))
(let ((x '(a b c . z))) (check (drop-right! x 3) => '())          (check x => '(a b c . z)))

(let ((x '(a b c d e f g h))) (check (call-with-values (lambda () (split-at  x 3)) (lambda (x xs) (list x xs))) => '((a b c) (d e f g h))) (check x => '(a b c d e f g h)))
(let ((x '(a b c d e f g h))) (check (call-with-values (lambda () (split-at! x 3)) (lambda (x xs) (list x xs))) => '((a b c) (d e f g h))) (check x => '(a b c)))

(check (last '(a)) => 'a)
(check (last '(a b)) => 'b)
(check (last '(a b c)) => 'c)

(check (last-pair '(a)) => '(a))
(check (last-pair '(a b)) => '(b))
(check (last-pair '(a b c)) => '(c))
(check (last-pair '(a b c . d)) => '(c . d))

(check (length '(a b c)) => 3)
(check (length '(a b . c)) => 2)

(check (length+ '(a b c)) => 3)
(check (length+ '(a b . c)) => 2)
(check (length+ '#1=(a b c . #1#)) => #f)

(let ((x '(a))     (y '(b)))     (check (append  x y) => '(a b))       (check x => '(a))         (check y => '(b)))
(let ((x '(a))     (y '(b)))     (check (append! x y) => '(a b))       (check x => '(a b))       (check y => '(b)))
(let ((x '(a))     (y '(b c d))) (check (append  x y) => '(a b c d))   (check x => '(a))         (check y => '(b c d)))
(let ((x '(a))     (y '(b c d))) (check (append! x y) => '(a b c d))   (check x => '(a b c d))   (check y => '(b c d)))
(let ((x '(a (b))) (y '((c))))   (check (append  x y) => '(a (b) (c))) (check x => '(a (b)))     (check y => '((c))))
(let ((x '(a (b))) (y '((c))))   (check (append! x y) => '(a (b) (c))) (check x => '(a (b) (c))) (check y => '((c))))
(let ((x '(a b))   (y '(c . d))) (check (append  x y) => '(a b c . d)) (check x => '(a b))       (check y => '(c . d)))
(let ((x '(a b))   (y '(c . d))) (check (append! x y) => '(a b c . d)) (check x => '(a b c . d)) (check y => '(c . d)))
(let ((x '())      (y 'a))       (check (append  x y) => 'a)           (check x => '())          (check y => 'a))
(let ((x '())      (y 'a))       (check (append! x y) => 'a)           (check x => '())          (check y => 'a))

(check (append  '(a b)) => '(a b))
(check (append! '(a b)) => '(a b))
(check (append)  => '())
(check (append!) => '())

(let ((x '((1 2 3) (4 5 6) (7 8 9))))   (check (concatenate  x) => '(1 2 3 4 5 6 7 8 9))   (check x => '((1 2 3) (4 5 6) (7 8 9))))
(let ((x '((1 2 3) (4 5 6) (7 8 9))))   (check (concatenate! x) => '(1 2 3 4 5 6 7 8 9))   (check x => '((1 2 3 4 5 6 7 8 9) (4 5 6 7 8 9) (7 8 9))))
(let ((x '((1 2 3) (4 5 6) (7 . ...)))) (check (concatenate  x) => '(1 2 3 4 5 6 7 . ...)) (check x => '((1 2 3) (4 5 6) (7 . ...))))
(let ((x '((1 2 3) (4 5 6) (7 . ...)))) (check (concatenate! x) => '(1 2 3 4 5 6 7 . ...)) (check x => '((1 2 3 4 5 6 7 . ...) (4 5 6 7 . ...) (7 . ...))))
(let ((x '((1 2 3) (4 5 6) ...)))       (check (concatenate  x) => '(1 2 3 4 5 6 . ...))   (check x => '((1 2 3) (4 5 6) ...)))
(let ((x '((1 2 3) (4 5 6) ...)))       (check (concatenate! x) => '(1 2 3 4 5 6 . ...))   (check x => '((1 2 3 4 5 6 . ...) (4 5 6 . ...) ...)))

(let ((x '(a b c)))             (check (reverse  x) => '(c b a))             (check x => '(a b c)))
(let ((x '(a b c)))             (check (reverse! x) => '(c b a))             (check x => '(a)))
(let ((x '(a (b c) d (e (f))))) (check (reverse  x) => '((e (f)) d (b c) a)) (check x => '(a (b c) d (e (f)))))
(let ((x '(a (b c) d (e (f))))) (check (reverse! x) => '((e (f)) d (b c) a)) (check x => '(a)))

(let ((x '(3 2 1)) (y '(4 5 6))) (check (append-reverse  x y) => '(1 2 3 4 5 6)) (check x => '(3 2 1))   (check y => '(4 5 6)))
(let ((x '(3 2 1)) (y '(4 5 6))) (check (append-reverse! x y) => '(1 2 3 4 5 6)) (check x => '(3 4 5 6)) (check y => '(4 5 6)))

(check (zip '(one two three) '(1 2 3) '(odd even odd even odd even odd even)) => '((one 1 odd) (two 2 even) (three 3 odd)))
(check (zip '(1 2 3)) => '((1) (2) (3)))
(check (zip '(3 1 4 1) (circular-list #f #t)) => '((3 #f) (1 #t) (4 #f) (1 #t)))

(call-with-values (lambda () (unzip1 '((1 one ONE a A) (2 two TWO b B) (3 three THREE c C) (4 four FOUR d D) (5 five FIVE e E)))) (lambda xs (check xs => '((1 2 3 4 5)))))
(call-with-values (lambda () (unzip2 '((1 one ONE a A) (2 two TWO b B) (3 three THREE c C) (4 four FOUR d D) (5 five FIVE e E)))) (lambda xs (check xs => '((1 2 3 4 5) (one two three four five)))))
(call-with-values (lambda () (unzip3 '((1 one ONE a A) (2 two TWO b B) (3 three THREE c C) (4 four FOUR d D) (5 five FIVE e E)))) (lambda xs (check xs => '((1 2 3 4 5) (one two three four five) (ONE TWO THREE FOUR FIVE)))))
(call-with-values (lambda () (unzip4 '((1 one ONE a A) (2 two TWO b B) (3 three THREE c C) (4 four FOUR d D) (5 five FIVE e E)))) (lambda xs (check xs => '((1 2 3 4 5) (one two three four five) (ONE TWO THREE FOUR FIVE) (a b c d e)))))
(call-with-values (lambda () (unzip5 '((1 one ONE a A) (2 two TWO b B) (3 three THREE c C) (4 four FOUR d D) (5 five FIVE e E)))) (lambda xs (check xs => '((1 2 3 4 5) (one two three four five) (ONE TWO THREE FOUR FIVE) (a b c d e) (A B C D E)))))

(check (count even? '(3 1 4 1 5 9 2 5 6)) => 3)
(check (count < '(1 2 4 8) '(2 4 6 8 10 12 14 16)) => 3)
(check (count < '(3 1 4 1) (circular-list 1 10)) => 2)

(check (fold + 0 '(1 2 3 4 5 6 7 8 9 10)) => 55)
(check (fold cons '() '(a b c)) => '(c b a))
(check (fold cons* '() '(a b c) '(1 2 3 4 5)) => '(c 3 b 2 a 1))
(check (fold (lambda (x k) (if (symbol? x) (+ k 1) k)) 0 '(1 a 2 b 3 c)) => 3)
(check (fold (lambda (s k) (max k (string-length s))) 0 '("one" "two" "three")) => 5)

(check (fold-right cons '() '(a b c)) => '(a b c))
(check (fold-right cons* '() '(a b c) '(1 2 3 4 5)) => '(a 1 b 2 c 3))
(check (fold-right (lambda (x xs) (if (even? x) (cons x xs) xs)) '() '(1 2 3 4 5)) => '(2 4))

(check (pair-fold (lambda (x xs) (set-cdr! x xs) x) '() '(a b c)) => '(c b a))

(check (pair-fold-right cons '() '(a b c)) => '((a b c) (b c) (c)))

(check (reduce max 42 '(1 2 3 4 5 6 7 8 9 10)) => 10)
(check (reduce max 42 '(1)) => 1)
(check (reduce max 42 '()) => 42)

(check (reduce-right append '() '((a b c) (d e f) (g h i))) => '(a b c d e f g h i))
(check (reduce-right append '(x y z) '((a b c) (d e f) (g h i))) => '(a b c d e f g h i))
(check (reduce-right append '(x y z) '((a b c))) => '(a b c))
(check (reduce-right append '(x y z) '()) => '(x y z))

(check (unfold (lambda (x) (< 10 x)) square (lambda (x) (+ x 1)) 1) => '(1 4 9 16 25 36 49 64 81 100))
(check (unfold null-list? car cdr '(a b c)) => '(a b c))
(check (unfold not-pair? car cdr '(a b c) values) => '(a b c))
(check (unfold not-pair? car cdr '(a b c . d) values) => '(a b c . d))
(check (unfold null-list? car cdr '(a b c) (lambda (x) '(d e f))) => '(a b c d e f))

(check (unfold-right zero? square (lambda (x) (- x 1)) 10) => '(1 4 9 16 25 36 49 64 81 100))
(check (unfold-right null-list? car cdr '(a b c)) => '(c b a))
(check (unfold-right null-list? car cdr '(c b a) '(d e f)) => '(a b c d e f))

(check (map cadr '((a b) (d e) (g h))) => '(b e h))
(check (map! cadr '((a b) (d e) (g h))) => '(b e h))
(check (map-in-order cadr '((a b) (d e) (g h))) => '(b e h))
(check (map (lambda (n) (expt n n)) '(1 2 3 4 5)) => '(1 4 27 256 3125))
(check (map! (lambda (n) (expt n n)) '(1 2 3 4 5)) => '(1 4 27 256 3125))
(check (map-in-order (lambda (n) (expt n n)) '(1 2 3 4 5)) => '(1 4 27 256 3125))
(check (map + '(1 2 3) '(4 5 6)) => '(5 7 9))
(check (map! + '(1 2 3) '(4 5 6)) => '(5 7 9))
(check (map-in-order + '(1 2 3) '(4 5 6)) => '(5 7 9))
(check (map + '(3 1 4 1) (circular-list 1 0)) => '(4 1 5 1))
(check (map! + '(3 1 4 1) (circular-list 1 0)) => '(4 1 5 1))
(check (map-in-order + '(3 1 4 1) (circular-list 1 0)) => '(4 1 5 1))
(check (let ((count 0)) (map (lambda (ignored) (set! count (+ count 1)) count) '(a b))) => '(1 2))
(check (let ((count 0)) (map! (lambda (ignored) (set! count (+ count 1)) count) '(a b))) => '(1 2))
(check (let ((count 0)) (map-in-order (lambda (ignored) (set! count (+ count 1)) count) '(a b))) => '(1 2))

(check (let ((v (make-vector 5))) (for-each (lambda (i) (vector-set! v i (* i i))) '(0 1 2 3 4)) v)  => #(0 1 4 9 16))

(check (append-map! (lambda (x) (list x (- x))) '(1 3 8)) => '(1 -1 3 -3 8 -8))

(check (filter-map (lambda (x) (and (number? x) (* x x))) '(a 1 b 3 c 7)) => '(1 9 49))

(check (parameterize ((current-output-port (open-output-string "")))
         (pair-for-each (lambda (pair)
                          (display pair))
                        '(a b c))
         (get-output-string (current-output-port)))
  => "(a b c)(b c)(c)")

(check (filter even? '(0 7 8 8 43 -4)) => '(0 8 8 -4))
(check (filter! even? '(0 7 8 8 43 -4)) => '(0 8 8 -4))

(call-with-values (lambda () (partition symbol? '(one 2 3 four five 6))) (lambda (x y) (check x => '(one four five)) (check y => '(2 3 6))))
(call-with-values (lambda () (partition! symbol? '(one 2 3 four five 6))) (lambda (x y) (check x => '(one four five)) (check y => '(2 3 6))))

(check (remove even? '(0 7 8 8 43 -4)) => '(7 43))
(check (remove! even? '(0 7 8 8 43 -4)) => '(7 43))

(check (find even? '(3 1 4 1 5 9)) => 4)

(check (find-tail even? '(3 1 37 -8 -5 0 0)) => '(-8 -5 0 0))
(check (find-tail even? '(3 1 37 -5)) => #f)

(check (take-while  even? '(2 18 3 10 22 9)) => '(2 18))
(check (take-while! even? '(2 18 3 10 22 9)) => '(2 18))
(check (drop-while  even? '(2 18 3 10 22 9)) => '(3 10 22 9))

(call-with-values (lambda () (span even? '(2 18 3 10 22 9))) (lambda (x y) (check x => '(2 18)) (check y => '(3 10 22 9))))
(call-with-values (lambda () (span! even? '(2 18 3 10 22 9))) (lambda (x y) (check x => '(2 18)) (check y => '(3 10 22 9))))

(call-with-values (lambda () (break even? '(3 1 4 1 5 9))) (lambda (x y) (check x => '(3 1)) (check y => '(4 1 5 9))))
(call-with-values (lambda () (break! even? '(3 1 4 1 5 9))) (lambda (x y) (check x => '(3 1)) (check y => '(4 1 5 9))))

(check (any integer? '(a 3 b 2.7)) => #t)
(check (any integer? '(a 3.1 b 2.7)) => #f)
(check (any < '(3 1 4 1 5) '(2 7 1 8 2)) => #t)

(check (every integer? '(1 2 3)) => #t)
(check (every integer? '(1 2 3.14)) => #f)
(check (every integer? '(1 2 3) '(4 5 6 7)) => #t)
(check (every integer? '(1 2 3) '(4 5 6 7.0)) => #t)
(check (every integer? '(1 2 3) (circular-list 4)) => #t)

(check (list-index even? '(3 1 4 1 5 9)) => 2)
(check (list-index < '(3 1 4 1 5 9 2 5 6) '(2 7 1 8 2)) => 1)
(check (list-index = '(3 1 4 1 5 9 2 5 6) '(2 7 1 8 2)) => #f)

(check (memq 'a '(a b c)) => '(a b c))
(check (memq 'b '(a b c)) => '(b c))
(check (memq 'a '(b c d)) => #f)
(check (memq (list 'a) '(b (a) c)) => #f)
(check (member (list 'a) '(b (a) c)) => '((a) c))
(check (memq 101 '(100 101 102)) => '(101 102))
(check (memv 101 '(100 101 102)) => '(101 102))

(check (delete 2 '(1 2 3)) => '(1 3))
(check (delete! 2 '(1 2 3)) => '(1 3))

(check (delete-duplicates '(a b a c a b c z)) => '(a b c z))
(check (delete-duplicates! '(a b a c a b c z)) => '(a b c z))
(check (delete-duplicates '((a . 3) (b . 7) (a . 9) (c . 1)) (lambda (x y) (eq? (car x) (car y)))) => '((a . 3) (b . 7) (c . 1)))
(check (delete-duplicates! '((a . 3) (b . 7) (a . 9) (c . 1)) (lambda (x y) (eq? (car x) (car y)))) => '((a . 3) (b . 7) (c . 1)))

(check (assq 'a '((a 1) (b 2) (c 3))) => '(a 1))
(check (assq 'b '((a 1) (b 2) (c 3))) => '(b 2))
(check (assq 'd '((a 1) (b 2) (c 3))) => #f)
(check (assq (list 'a) '(((a)) ((b)) ((c)))) => #f)
(check (assoc (list 'a) '(((a)) ((b)) ((c)))) => '((a)))
(check (assq 5 '((2 3) (5 7) (11 13))) => '(5 7))
(check (assv 5 '((2 3) (5 7) (11 13))) => '(5 7))

(check (alist-cons 'a 1 '((b . 2) (c . 3))) => '((a . 1) (b . 2) (c . 3)))

(check (alist-copy '((a . 1) (b . 2) (c . 3))) => '((a . 1) (b . 2) (c . 3)))

(check (alist-delete 'a '((a 1) (b 2) (c 3))) => '((b 2) (c 3)))
(check (alist-delete! 'a '((a 1) (b 2) (c 3))) => '((b 2) (c 3)))
(check (alist-delete 'b '((a 1) (b 2) (c 3))) => '((a 1) (c 3)))
(check (alist-delete! 'b '((a 1) (b 2) (c 3))) => '((a 1) (c 3)))
(check (alist-delete 'c '((a 1) (b 2) (c 3))) => '((a 1) (b 2)))
(check (alist-delete! 'c '((a 1) (b 2) (c 3))) => '((a 1) (b 2)))

(check (lset= eq? '(b e a) '(a e b) '(e e b a)) => #t)
(check (lset= eq? '(a)) => #t)
(check (lset= eq?) => #t)

(check (lset<= eq? '(a) '(a b a) '(a b c c)) => #t)
(check (lset<= eq? '(a)) => #t)
(check (lset<= eq?) => #t)

(check (lset-adjoin eq? '(a b c d c e) 'a 'e 'i 'o 'u) => '(u o i a b c d c e))

(check (lset-union eq? '(a b c d e) '(a e i o u)) => '(u o i a b c d e))
(check (lset-union! eq? '(a b c d e) '(a e i o u)) => '(u o i a b c d e))
(check (lset-union eq? '(a a c) '(x a x)) => '(x a a c))
(check (lset-union! eq? '(a a c) '(x a x)) => '(x a a c))
(check (lset-union eq?) => '())
(check (lset-union! eq?) => '())
(check (lset-union eq? '(a b c)) => '(a b c))
(check (lset-union! eq? '(a b c)) => '(a b c))

(check (lset-intersection eq? '(a b c d e) '(a e i o u)) => '(a e))
(check (lset-intersection! eq? '(a b c d e) '(a e i o u)) => '(a e))
(check (lset-intersection eq? '(a x y a) '(x a x z)) => '(a x a))
(check (lset-intersection! eq? '(a x y a) '(x a x z)) => '(a x a))
(check (lset-intersection eq? '(a b c)) => '(a b c))
(check (lset-intersection! eq? '(a b c)) => '(a b c))

(check (lset-difference eq? '(a b c d e) '(a e i o u)) => '(b c d))
(check (lset-difference! eq? '(a b c d e) '(a e i o u)) => '(b c d))
(check (lset-difference eq? '(a b c)) => '(a b c))
(check (lset-difference! eq? '(a b c)) => '(a b c))

(check (lset-xor eq? '(a b c d e) '(a e i o u)) => '(u o i b c d))
(check (lset-xor! eq? '(a b c d e) '(a e i o u)) => '(u o i b c d))
(check (lset-xor eq?) => '())
(check (lset-xor! eq?) => '())
(check (lset-xor eq? '(a b c d e)) => '(a b c d e))
(check (lset-xor! eq? '(a b c d e)) => '(a b c d e))

(call-with-values (lambda () (lset-diff+intersection eq? '(a b c d e) '(a e i o u))) (lambda (x y) (check x => '(b c d)) (check y => '(a e))))
(call-with-values (lambda () (lset-diff+intersection! eq? '(a b c d e) '(a e i o u))) (lambda (x y) (check x => '(b c d)) (check y => '(a e))))

(check-report)

(exit (check-passed? 408))
