(import (scheme base)
        (scheme process-context)
        (scheme write)
        (only (srfi 1) circular-list?)
        (srfi 78))

(define (print . xs)
  (for-each (lambda (x)
              (display x))
            xs)
  (newline)
  )

(let ((x (list 'a 'b 'c)))
  (set-cdr! (cddr x) x)
  (check (circular-list? x) => #t)
  (print #\newline "x is " x))

(let ((x (list 'a)))
  (set-cdr! x x)
  (check (circular-list? x) => #t)
  (print #\newline "x is " x))

(let ((x (list 1)))
  (newline)
  (display "(write (list x x)) = ")
  (write (list x x))
  (newline)
  (newline)
  (display "(write-shared (list x x)) = ")
  (write-shared (list x x))
  (newline))

(let ((x '#0=(a b c . #0#)))
  (check (circular-list? x) => #t)
  (print #\newline "x is " x))

(let ((x '#0=(a b c (d e f . #0#))))
  (check (circular-list? x) => #f)
  (newline)
  (display "(write-shared x) = ")
  (write-shared x)
  (newline))

(check-report)

(exit (check-passed? 4))
