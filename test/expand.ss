(import (only (meevax environment) expand)
        (scheme base)
        (scheme eval)
        (scheme process-context)
        (scheme read)
        (scheme repl)
        (scheme write)
        (srfi 78))

(define strip-environment (environment '(meevax macro-transformer)
                                       '(scheme base)
                                       '(scheme list)))

(define (strip expression)
  (parameterize ((current-output-port (open-output-string)))
    (write (expand expression strip-environment))
    (read (open-input-string (get-output-string (current-output-port))))))

(check (strip '(let ((x 1)
                     (y 2)
                     (z 3))
                 (+ x y z)))
  => '(($lambda (x y z)
         (+ x y z))
       1 2 3))

(check (strip '(cond ((> 3 2) 'greater)
                     ((< 3 2) 'less)))
  => '($if (> 3 2)
           ($begin 'greater)
           ($if (< 3 2)
                ($begin 'less))))

(check (strip '(let ()
                 (define x 1)
                 (define y (+ x 1))
                 (+ x y)))
  => '(($lambda ()
         (($lambda (x y)
           ($set! x 1)
           ($set! y (+ x 1))
           (+ x y))
          ()
          ()))))

(check (strip '(let ((x 5))
                 (define foo (lambda (y) (bar x y)))
                 (define bar (lambda (a b) (+ (* a b) a)))
                 (foo (+ x 3))))
  => '(($lambda (x)
         (($lambda (foo bar)
            ($set! foo (lambda (y) (bar x y)))
            ($set! bar (lambda (a b) (+ (* a b) a)))
            (foo (+ x 3)))
          ()
          ()))
       5))

(check (strip '(let ()
                 (define-values (x y)
                   (values 1 2))
                 (+ x y)))
  => '(($lambda ()
         (($lambda (x y)
            ($set! x ($call-with-values ($lambda ()
                                           (values 1 2))
                                        $list))
            ($set! y (($lambda ($x)
                        ($set! x ($car x))
                        $x)
                      ($cadr x)))
            (+ x y))
          ()
          ()))))

(check (strip '(let ((x 'outer))
                 (let-syntax ((m (syntax-rules ()
                                   ((m) x))))
                   (let ((x 'inner))
                     (m)))))
  => '(($lambda (x)
         (($lambda (m)
            (($lambda (x:1)
               $x)
             'inner))))
       'outer))

(check (strip '(let ((x 'outer))
                 (letrec-syntax ((m (syntax-rules ()
                                      ((m) x))))
                   (let ((x 'inner))
                     (m)))))
  => '(($lambda (x)
         (($lambda (m)
            (($lambda (x:1)
               $x)
             'inner))))
       'outer))

(eval '(define-syntax sc-swap!
         (sc-macro-transformer
           (lambda (form on-use)
             (let ((a (make-syntactic-closure on-use '() (cadr form)))
                   (b (make-syntactic-closure on-use '() (caddr form))))
               `(let ((x ,a))
                  (set! ,a ,b)
                  (set! ,b x))))))
      strip-environment)

(check (strip '(let ((x 1)
                     (y 2))
                 (sc-swap! x y)))
  => '(($lambda (x y)
         (($lambda (x:1)
            ($set! $x $y)
            ($set! $y x:1))
          $x))
       1 2))

(check (strip '(let ((x 1)
                     (y 2))
                 (let ((a 'A)
                       (b 'B)
                       (let 'LET)
                       (set! 'SET!))
                   (sc-swap! x y))))
  => '(($lambda (x y)
         (($lambda (a b let set!)
            (($lambda (x:1)
               ($set! $x $y)
               ($set! $y x:1))
             $x))
          (quote A)
          (quote B)
          (quote LET)
          (quote SET!)))
       1 2))

(check (strip '(let ((x 1)
                     (y 2))
                 (let-syntax ((local-sc-swap!
                                (sc-macro-transformer
                                  (lambda (form on-use)
                                    (let ((a (make-syntactic-closure on-use '() (cadr form)))
                                          (b (make-syntactic-closure on-use '() (caddr form))))
                                      `(let ((x ,a))
                                         (set! ,a ,b)
                                         (set! ,b x)))))))
                   (local-sc-swap! x y))))
  => '(($lambda (x y)
         (($lambda (local-sc-swap!)
            (($lambda (x:1)
               ($set! $x $y)
               ($set! $y x:1))
             $x))))
       1 2))

(eval '(define-syntax rsc-swap!
         (rsc-macro-transformer
           (lambda (form environment)
             (let ((a (cadr form))
                   (b (caddr form))
                   (x (make-syntactic-closure environment '() 'x))
                   (let (make-syntactic-closure environment '() 'let))
                   (set! (make-syntactic-closure environment '() 'set!)))
               `(,let ((,x ,a))
                  (,set! ,a ,b)
                  (,set! ,b ,x))))))
      strip-environment)

(check (strip '(let ((x 1)
                     (y 2))
                 (rsc-swap! x y)))
  => '(($lambda (x y)
         (($lambda ($x)
            ($set! x y)
            ($set! y $x))
          x))
       1 2))

(check (strip '(let ((x 1)
                     (y 2))
                 (let-syntax ((local-rsc-swap!
                                (rsc-macro-transformer
                                  (lambda (form environment)
                                    (let ((a (cadr form))
                                          (b (caddr form))
                                          (x (make-syntactic-closure environment '() 'x))
                                          (let (make-syntactic-closure environment '() 'let))
                                          (set! (make-syntactic-closure environment '() 'set!)))
                                      `(,let ((,x ,a))
                                         (,set! ,a ,b)
                                         (,set! ,b ,x)))))))
                   (local-rsc-swap! x y))))
  => '(($lambda (x y)
         (($lambda (local-rsc-swap!)
            (($lambda ($x)
               ($set! x y)
               ($set! y $x))
             x))))
       1 2))

(eval '(define-syntax er-swap!
         (er-macro-transformer
           (lambda (form rename compare)
             (let ((a (cadr form))
                   (b (caddr form)))
               `(,(rename 'let) ((,(rename 'x) ,a))
                                (,(rename 'set!) ,a ,b)
                                (,(rename 'set!) ,b ,(rename 'x)))))))
      strip-environment)

(check (strip '(let ((x 1)
                     (y 2))
                 (er-swap! x y)))
  => '(($lambda (x y)
         (($lambda ($x)
            ($set! x y)
            ($set! y $x))
          x))
       1 2))

(check (strip '(let ((x 1)
                     (y 2))
                 (let-syntax ((local-er-swap!
                                (er-macro-transformer
                                  (lambda (form rename compare)
                                    (let ((a (cadr form))
                                          (b (caddr form)))
                                      `(,(rename 'let) ((,(rename 'x) ,a))
                                         (,(rename 'set!) ,a ,b)
                                         (,(rename 'set!) ,b ,(rename 'x))))))))
                   (local-er-swap! x y))))
  => '(($lambda (x y)
         (($lambda (local-er-swap!)
            (($lambda ($x)
               ($set! x y)
               ($set! y $x))
             x))))
       1 2))

(eval '(define-syntax swap!
         (syntax-rules ()
           ((swap! a b)
            (let ((x a))
              (set! a b)
              (set! b x)))))
      strip-environment)

(check (strip '(let ((x 1)
                     (y 2))
                 (swap! x y)))
  => '(($lambda (x y)
         (($lambda ($x)
            ($set! x y)
            ($set! y $x))
          x))
       1 2))

(check (strip '(let ((x 1)
                     (y 2))
                 (let-syntax ((local-swap!
                                (syntax-rules ()
                                  ((swap! a b)
                                   (let ((x a))
                                     (set! a b)
                                     (set! b x))))))
                   (local-swap! x y))))
  => '(($lambda (x y)
         (($lambda (local-swap!)
            (($lambda ($x)
               ($set! x y)
               ($set! y $x))
             x))))
       1 2))

(check (strip '(let ((a 'A)
                     (b 'B)
                     (x 'X)
                     (y 'Y))
                 (let*-values (((a b) (values x y))
                               ((x y) (values a b)))
                   (list a b x y))))
  => '(($lambda (a b x y)
         ($call-with-values ($lambda () (values x y))
                            ($lambda ($x $x)
                              (($lambda (a:1 b:1)
                                 ($call-with-values ($lambda () (values a:1 b:1))
                                                    ($lambda ($x $x)
                                                      (($lambda (x:1 y:1)
                                                         (($lambda ()
                                                            (list a:1 b:1 x:1 y:1))))
                                                       $x $x))))
                               $x $x))))
       (quote A)
       (quote B)
       (quote X)
       (quote Y)))

(eval '(define-syntax macro
         (syntax-rules ()
           ((macro)
            (lambda xs
              (letrec-syntax ((inner-macro (syntax-rules ()
                                             ((inner-macro) xs))))
                (inner-macro))))))
      strip-environment)

(check (strip '((macro) 1 2 3))
  => '(($lambda $xs
         (($lambda ($inner-macro)
            $$xs)))
       1 2 3))

(check (strip '(cond-expand
                 (r5rs 'r5rs)
                 (r6rs 'r6rs)
                 (r7rs 'r7rs)
                 (else 'unknown)))
  => '($begin 'r7rs))

(check-report)

(exit (check-passed? 19))
