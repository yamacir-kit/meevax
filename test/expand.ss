(import (only (meevax environment) expand)
        (scheme base)
        (scheme eval)
        (scheme process-context)
        (scheme read)
        (scheme repl)
        (scheme write)
        (srfi 78))

(define strip
  (let ((scheme-report-environment-7 (environment '(scheme base))))
    (lambda (expression)
      (parameterize ((current-output-port (open-output-string)))
        (write (expand expression scheme-report-environment-7))
        (read (open-input-string (get-output-string (current-output-port))))))))

(check (strip '(cond ((> 3 2) 'greater)
                     ((< 3 2) 'less)))
  => '(if (> 3 2)
          (begin 'greater)
          (if (< 3 2)
              (begin 'less))))

(check (strip '(let ()
                 (define x 1)
                 (define y (+ x 1))
                 (+ x y)))
  => '((lambda ()
         ((lambda (x y)
           (set! x 1)
           (set! y (+ x 1))
           (+ x y))
          ()
          ()))))

(check (strip '(let ((x 5))
                 (define foo (lambda (y) (bar x y)))
                 (define bar (lambda (a b) (+ (* a b) a)))
                 (foo (+ x 3))))
  => '((lambda (x)
         ((lambda (foo bar)
            (set! foo (lambda (y) (bar x y)))
            (set! bar (lambda (a b) (+ (* a b) a)))
            (foo (+ x 3)))
          ()
          ()))
       5))

(check (strip '(let ()
                 (define-values (x y)
                   (values 1 2))
                 (+ x y)))
  => '((lambda ()
         ((lambda (x y)
            (set! x (call-with-values (lambda ()
                                        (values 1 2))
                                      list))
            (set! y ((lambda (x)
                       (set! x (car x))
                       x)
                     (cadr x)))
            (+ x y))
          ()
          ()))))

(check (strip '(let ((x 'outer))
                 (let-syntax ((m (syntax-rules ()
                                   ((m) x))))
                   (let ((x 'inner))
                     (m)))))
  => '((lambda (x)
         ((lambda (m)
            ((lambda (x)
               x) ; This `x` is a syntactic-closure
             'inner))))
       'outer))

(check (strip '(let ((x 'outer))
                 (letrec-syntax ((m (syntax-rules ()
                                      ((m) x))))
                   (let ((x 'inner))
                     (m)))))
  => '((lambda (x)
         ((lambda (m)
            ((lambda (x)
               x)
             'inner))))
       'outer))

(check (strip '(cond-expand
                 (r5rs 'r5rs)
                 (r6rs 'r6rs)
                 (r7rs 'r7rs)
                 (else 'unknown)))
  => '(begin 'r7rs))

(check-report)

(exit (check-passed? 7))
